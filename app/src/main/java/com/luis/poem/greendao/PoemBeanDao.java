package com.luis.poem.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.luis.poem.bean.IDbean;
import com.luis.poem.bean.OidConverter;

import com.luis.poem.bean.PoemBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POEM_BEAN".
*/
public class PoemBeanDao extends AbstractDao<PoemBean, Long> {

    public static final String TABLENAME = "POEM_BEAN";

    /**
     * Properties of entity PoemBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Remark = new Property(3, String.class, "remark", false, "REMARK");
        public final static Property Shangxi = new Property(4, String.class, "shangxi", false, "SHANGXI");
        public final static Property Dynasty = new Property(5, String.class, "dynasty", false, "DYNASTY");
        public final static Property Translation = new Property(6, String.class, "translation", false, "TRANSLATION");
        public final static Property Writer = new Property(7, String.class, "writer", false, "WRITER");
        public final static Property _id = new Property(8, String.class, "_id", false, "O_ID");
    }

    private final OidConverter _idConverter = new OidConverter();

    public PoemBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PoemBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POEM_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"CONTENT\" TEXT," + // 2: content
                "\"REMARK\" TEXT," + // 3: remark
                "\"SHANGXI\" TEXT," + // 4: shangxi
                "\"DYNASTY\" TEXT," + // 5: dynasty
                "\"TRANSLATION\" TEXT," + // 6: translation
                "\"WRITER\" TEXT," + // 7: writer
                "\"O_ID\" TEXT UNIQUE );"); // 8: _id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POEM_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PoemBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(4, remark);
        }
 
        String shangxi = entity.getShangxi();
        if (shangxi != null) {
            stmt.bindString(5, shangxi);
        }
 
        String dynasty = entity.getDynasty();
        if (dynasty != null) {
            stmt.bindString(6, dynasty);
        }
 
        String translation = entity.getTranslation();
        if (translation != null) {
            stmt.bindString(7, translation);
        }
 
        String writer = entity.getWriter();
        if (writer != null) {
            stmt.bindString(8, writer);
        }
 
        IDbean _id = entity.get_id();
        if (_id != null) {
            stmt.bindString(9, _idConverter.convertToDatabaseValue(_id));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PoemBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(4, remark);
        }
 
        String shangxi = entity.getShangxi();
        if (shangxi != null) {
            stmt.bindString(5, shangxi);
        }
 
        String dynasty = entity.getDynasty();
        if (dynasty != null) {
            stmt.bindString(6, dynasty);
        }
 
        String translation = entity.getTranslation();
        if (translation != null) {
            stmt.bindString(7, translation);
        }
 
        String writer = entity.getWriter();
        if (writer != null) {
            stmt.bindString(8, writer);
        }
 
        IDbean _id = entity.get_id();
        if (_id != null) {
            stmt.bindString(9, _idConverter.convertToDatabaseValue(_id));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PoemBean readEntity(Cursor cursor, int offset) {
        PoemBean entity = new PoemBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // remark
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // shangxi
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dynasty
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // translation
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // writer
            cursor.isNull(offset + 8) ? null : _idConverter.convertToEntityProperty(cursor.getString(offset + 8)) // _id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PoemBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRemark(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShangxi(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDynasty(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTranslation(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWriter(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.set_id(cursor.isNull(offset + 8) ? null : _idConverter.convertToEntityProperty(cursor.getString(offset + 8)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PoemBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PoemBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PoemBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
